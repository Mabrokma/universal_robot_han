<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />


  <!-- startup simulated world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
  </include>

		<group ns="ur5_l">
				<!-- send robot urdf to param server -->
				<include file="$(find ur_description)/launch/ur5_upload_l.launch">
				  <arg name="limited" value="$(arg limited)"/>
				</include>

				<!-- push robot_description to factory and spawn robot in gazebo -->
				<node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0.1" respawn="false" output="screen" />

				<include file="$(find ur_gazebo)/launch/controller_utils.launch"/>

				<rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
				<node name="arm_controller_spawner" pkg="controller_manager" type="spawner" args="arm_controller" />
		</group>

		<group ns="ur5_r">
				<!-- send robot urdf to param server -->
				<include file="$(find ur_description)/launch/ur5_upload_r.launch">
				  <arg name="limited" value="$(arg limited)"/>
				</include>

				<!-- push robot_description to factory and spawn robot in gazebo -->
				<node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot2 -y 0.8 -z 0.1" respawn="false" output="screen" />

				<include file="$(find ur_gazebo)/launch/controller_utils.launch"/>

				<rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/>
				<node name="arm_controller_spawner" pkg="controller_manager" type="spawner" args="arm_controller" />
		</group>


  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find ur5_mirror_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/> 
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>
  
  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find ur5_mirror_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>  
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find ur5_mirror_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find ur5_mirror_config)/launch/default_warehouse_db.launch" if="$(arg db)"/>

</launch>
